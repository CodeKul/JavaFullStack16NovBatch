To create a string there are 3 classes in Java
1. String
2. String Buffer
3. String Builder

1) String :
- Non-primitive
- set of character
- seq of char values
- final
- implements Serializable, Comparable<String>, CharSequence
- Immutable(can not be changed),unchangeable,unmodifiable
- thread-safe

3 ways create string
1. by using char array
   char[] ch = {'J','A','V','A'};
   String s = new String(ch);

2. String literal
    String str = "Codekul";

3. New Keyword
    String str = new String("Codekul");


**String Pool Const/String Literal Pool
- separate place in heap memory
- values of strings gets stored
- JVM checks SPC first,& if the string is already exists in the SPC,
  then it refer to same string. If string does not exist then new
  string instance is created


2) String Buffer
	- Mutable class (modify)
	- thread safe (that's why multiple threads cannot access )
	- all methods of SB are synchronised
	- slow


Difference between String & StringBuffer
	String                      String Buffer
1. Immutable                    1. Mutable
2. used String Constant         2. Heap Memory
	pool
3. slow                         3. fast

3) String Builder
	- Mutable
	- methods are non-synchronised
	- available from JDK 1.5 version
	- fast

Difference between StringBuilder & StringBuffer
	StringBuffer        StringBuilder
1. synchronised         1. non-synchronised
2. thread-safe          2. not thread-safe
3. less efficient       3. more efficient
4. introduced in 1.0    4. introduced in 1.5

Can we create custom immutable class?
Yes.
Steps:
1. make class as a final
2. all data members must be final & private
3. parameterised constructor
4. getter method


Homework
//Person - name
Doctor - name,first,middle,last(split),mobileno-10(exception),email-id,
id-String(D-001)
//Patient - (P-101)
Address - flat no-Integer(Exception),city,state,country
-trim()
difference between isEmpty() & isBlank()
